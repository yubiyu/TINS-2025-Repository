#pragma once

struct FeatureIndex
{
    enum enumFeatures
    {
        FEATURE_NONE = 0,

        FEATURE_CHEST_CLOSED = 1,
        FEATURE_CHEST_OPEN = 2,

    };
    //static const int MARKER_FEATURE_CHEST_CLOSED_BEGIN = FEATURE_CHEST_CLOSED;
    //static const int MARKER_FEATURE_CHEST_CLOSED_END = FEATURE_CHEST_CLOSED;
    //static const int MARKER_FEATURE_CHEST_OPEN_BEGIN = FEATURE_CHEST_OPEN;
    //static const int MARKER_FEATURE_CHEST_OPEN_END = FEATURE_CHEST_OPEN;
    //static const int NUM_FEATURE_TYPES = MARKER_FEATURE_CHEST_OPEN_END + 1;
    static const int NUM_FEATURE_TYPES = FEATURE_CHEST_OPEN + 1;

    enum enumBlueprintFeatures
    {
        BLUEPRINT_FEATURE_NONE = 0x00,

        BLUEPRINT_FEATURE_CHEST_CLOSED = 0x01,

        BLUEPRINT_FEATURE_CHEST_OPEN = 0x02,
    };
    //static const int MARKER_BLUEPRINT_FEATURE_CHEST_CLOSED_BEGIN = BLUEPRINT_FEATURE_CHEST_A_CLOSED;
    //static const int MARKER_BLUEPRINT_FEATURE_CHEST_CLOSED_END = BLUEPRINT_FEATURE_CHEST_C_CLOSED;
    //static const int MARKER_BLUEPRINT_FEATURE_CHEST_OPEN_BEGIN = BLUEPRINT_FEATURE_CHEST_A_OPEN;
    //static const int MARKER_BLUEPRINT_FEATURE_CHEST_OPEN_END = BLUEPRINT_FEATURE_CHEST_C_OPEN;
    static const int NUM_BLUEPRINT_FEATURE_TYPES = NUM_FEATURE_TYPES; // For the time being, assuming 1:1 between blueprints and features.
};